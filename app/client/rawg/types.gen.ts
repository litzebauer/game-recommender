// This file is auto-generated by @hey-api/openapi-ts

export type Position = {
    readonly id?: number;
    readonly name?: string;
    readonly slug?: string;
};

export type PersonReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly image?: string;
    readonly image_background?: string;
    readonly games_count?: number;
};

export type PersonWritable = {
    name: string;
};

export type PersonSingleReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly image?: string;
    readonly image_background?: string;
    description?: string;
    readonly games_count?: number;
    readonly reviews_count?: number;
    readonly rating?: string;
    readonly rating_top?: number;
    readonly updated?: string;
};

export type PersonSingleWritable = {
    name: string;
    description?: string;
};

export type DeveloperReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
};

export type DeveloperWritable = {
    name: string;
};

export type DeveloperSingleReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
    description?: string;
};

export type DeveloperSingleWritable = {
    name: string;
    description?: string;
};

export type GameReadable = {
    readonly id?: number;
    readonly slug?: string;
    readonly name?: string;
    readonly released?: string;
    readonly tba?: boolean;
    readonly background_image?: string;
    rating: number;
    readonly rating_top?: number;
    readonly ratings?: {
        [key: string]: unknown;
    };
    readonly ratings_count?: number;
    readonly reviews_text_count?: string;
    readonly added?: number;
    readonly added_by_status?: {
        [key: string]: unknown;
    };
    readonly metacritic?: number;
    /**
     * in hours
     */
    readonly playtime?: number;
    readonly suggestions_count?: number;
    readonly updated?: string;
    esrb_rating?: {
        id?: number;
        slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending';
        name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending';
    } | null;
    platforms?: Array<{
        platform?: {
            id?: number;
            slug?: string;
            name?: string;
        };
        released_at?: string | null;
        requirements?: {
            minimum?: string;
            recommended?: string;
        } | null;
    }>;
};

export type GameWritable = {
    rating: number;
    esrb_rating?: {
        id?: number;
        slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending';
        name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending';
    } | null;
    platforms?: Array<{
        platform?: {
            id?: number;
            slug?: string;
            name?: string;
        };
        released_at?: string | null;
        requirements?: {
            minimum?: string;
            recommended?: string;
        } | null;
    }>;
};

export type GamePersonListReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly image?: string;
    readonly image_background?: string;
    readonly games_count?: number;
};

export type GamePersonListWritable = {
    name: string;
};

export type ScreenShotReadable = {
    readonly id?: number;
    /**
     * An image file with size up to 20 MB.
     */
    readonly image?: string;
    /**
     * Set image as hidden or visible.
     */
    hidden?: boolean;
    readonly width?: number;
    readonly height?: number;
};

export type ScreenShotWritable = {
    /**
     * Set image as hidden or visible.
     */
    hidden?: boolean;
};

export type GameStoreFullReadable = {
    readonly id?: number;
    readonly game_id?: string;
    readonly store_id?: string;
    url: string;
};

export type GameStoreFullWritable = {
    url: string;
};

export type GamePlatformMetacritic = {
    readonly metascore?: number;
    readonly url?: string;
};

export type GameSingleReadable = {
    readonly id?: number;
    readonly slug?: string;
    readonly name?: string;
    readonly name_original?: string;
    readonly description?: string;
    readonly metacritic?: number;
    readonly metacritic_platforms?: Array<GamePlatformMetacritic>;
    readonly released?: string;
    readonly tba?: boolean;
    readonly updated?: string;
    readonly background_image?: string;
    readonly background_image_additional?: string;
    readonly website?: string;
    rating: number;
    readonly rating_top?: number;
    readonly ratings?: {
        [key: string]: unknown;
    };
    readonly reactions?: {
        [key: string]: unknown;
    };
    readonly added?: number;
    readonly added_by_status?: {
        [key: string]: unknown;
    };
    /**
     * in hours
     */
    readonly playtime?: number;
    readonly screenshots_count?: number;
    readonly movies_count?: number;
    readonly creators_count?: number;
    readonly achievements_count?: number;
    readonly parent_achievements_count?: string;
    /**
     * For example "https://www.reddit.com/r/uncharted/" or "uncharted"
     */
    readonly reddit_url?: string;
    readonly reddit_name?: string;
    readonly reddit_description?: string;
    readonly reddit_logo?: string;
    readonly reddit_count?: number;
    readonly twitch_count?: string;
    readonly youtube_count?: string;
    readonly reviews_text_count?: string;
    readonly ratings_count?: number;
    readonly suggestions_count?: number;
    readonly alternative_names?: Array<string>;
    /**
     * For example "http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt"
     */
    readonly metacritic_url?: string;
    readonly parents_count?: number;
    readonly additions_count?: number;
    readonly game_series_count?: number;
    esrb_rating?: {
        id?: number;
        slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending';
        name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending';
    } | null;
    platforms?: Array<{
        platform?: {
            id?: number;
            slug?: string;
            name?: string;
        };
        released_at?: string | null;
        requirements?: {
            minimum?: string;
            recommended?: string;
        } | null;
    }>;
};

export type GameSingleWritable = {
    rating: number;
    esrb_rating?: {
        id?: number;
        slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending';
        name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending';
    } | null;
    platforms?: Array<{
        platform?: {
            id?: number;
            slug?: string;
            name?: string;
        };
        released_at?: string | null;
        requirements?: {
            minimum?: string;
            recommended?: string;
        } | null;
    }>;
};

export type ParentAchievement = {
    readonly id?: number;
    readonly name?: string;
    readonly description?: string;
    readonly image?: string;
    readonly percent?: string;
};

export type Movie = {
    readonly id?: number;
    readonly name?: string;
    readonly preview?: string;
    readonly data?: {
        [key: string]: unknown;
    };
};

export type Reddit = {
    readonly id?: number;
    readonly name?: string;
    readonly text?: string;
    readonly image?: string;
    readonly url?: string;
    readonly username?: string;
    readonly username_url?: string;
    readonly created?: string;
};

export type Twitch = {
    readonly id?: number;
    readonly external_id?: number;
    readonly name?: string;
    readonly description?: string;
    readonly created?: string;
    readonly published?: string;
    readonly thumbnail?: string;
    readonly view_count?: number;
    readonly language?: string;
};

export type Youtube = {
    readonly id?: number;
    readonly external_id?: string;
    readonly channel_id?: string;
    readonly channel_title?: string;
    readonly name?: string;
    readonly description?: string;
    readonly created?: string;
    readonly view_count?: number;
    readonly comments_count?: number;
    readonly like_count?: number;
    readonly dislike_count?: number;
    readonly favorite_count?: number;
    readonly thumbnails?: {
        [key: string]: unknown;
    };
};

export type GenreReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
};

export type GenreWritable = {
    name: string;
};

export type GenreSingleReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
    description?: string;
};

export type GenreSingleWritable = {
    name: string;
    description?: string;
};

export type PlatformReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
    readonly image?: string | null;
    year_start?: number | null;
    year_end?: number | null;
};

export type PlatformWritable = {
    name: string;
    year_start?: number | null;
    year_end?: number | null;
};

export type PlatformParentSingleReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    platforms: Array<PlatformReadable>;
};

export type PlatformParentSingleWritable = {
    name: string;
    platforms: Array<PlatformWritable>;
};

export type PlatformSingleReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
    description?: string;
    readonly image?: string | null;
    year_start?: number | null;
    year_end?: number | null;
};

export type PlatformSingleWritable = {
    name: string;
    description?: string;
    year_start?: number | null;
    year_end?: number | null;
};

export type PublisherReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
};

export type PublisherWritable = {
    name: string;
};

export type PublisherSingleReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
    description?: string;
};

export type PublisherSingleWritable = {
    name: string;
    description?: string;
};

export type StoreReadable = {
    readonly id?: number;
    name: string;
    domain?: string | null;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
};

export type StoreWritable = {
    name: string;
    domain?: string | null;
};

export type StoreSingleReadable = {
    readonly id?: number;
    name: string;
    domain?: string | null;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
    description?: string;
};

export type StoreSingleWritable = {
    name: string;
    domain?: string | null;
    description?: string;
};

export type TagReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
    readonly language?: string;
};

export type TagWritable = {
    name: string;
};

export type TagSingleReadable = {
    readonly id?: number;
    name: string;
    readonly slug?: string;
    readonly games_count?: number;
    readonly image_background?: string;
    description?: string;
};

export type TagSingleWritable = {
    name: string;
    description?: string;
};

export type CreatorRolesListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/creator-roles';
};

export type CreatorRolesListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<Position>;
    };
};

export type CreatorRolesListResponse = CreatorRolesListResponses[keyof CreatorRolesListResponses];

export type CreatorsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/creators';
};

export type CreatorsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<PersonReadable>;
    };
};

export type CreatorsListResponse = CreatorsListResponses[keyof CreatorsListResponses];

export type CreatorsReadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/creators/{id}';
};

export type CreatorsReadResponses = {
    200: PersonSingleReadable;
};

export type CreatorsReadResponse = CreatorsReadResponses[keyof CreatorsReadResponses];

export type DevelopersListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/developers';
};

export type DevelopersListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<DeveloperReadable>;
    };
};

export type DevelopersListResponse = DevelopersListResponses[keyof DevelopersListResponses];

export type DevelopersReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Developer.
         */
        id: number;
    };
    query?: never;
    url: '/developers/{id}';
};

export type DevelopersReadResponses = {
    200: DeveloperSingleReadable;
};

export type DevelopersReadResponse = DevelopersReadResponses[keyof DevelopersReadResponses];

export type GamesListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * Search query.
         */
        search?: string;
        /**
         * Disable fuzziness for the search query.
         */
        search_precise?: boolean;
        /**
         * Mark the search query as exact.
         */
        search_exact?: boolean;
        /**
         * Filter by parent platforms, for example: `1,2,3`.
         */
        parent_platforms?: string;
        /**
         * Filter by platforms, for example: `4,5`.
         */
        platforms?: string;
        /**
         * Filter by stores, for example: `5,6`.
         */
        stores?: string;
        /**
         * Filter by developers, for example: `1612,18893` or `valve-software,feral-interactive`.
         */
        developers?: string;
        /**
         * Filter by publishers, for example: `354,20987` or `electronic-arts,microsoft-studios`.
         */
        publishers?: string;
        /**
         * Filter by genres, for example: `4,51` or `action,indie`.
         */
        genres?: string;
        /**
         * Filter by tags, for example: `31,7` or `singleplayer,multiplayer`.
         */
        tags?: string;
        /**
         * Filter by creators, for example: `78,28` or `cris-velasco,mike-morasky`.
         */
        creators?: string;
        /**
         * Filter by a release date, for example: `2010-01-01,2018-12-31.1960-01-01,1969-12-31`.
         */
        dates?: string;
        /**
         * Filter by an update date, for example: `2020-12-01,2020-12-31`.
         */
        updated?: string;
        /**
         * Filter by platforms count, for example: `1`.
         */
        platforms_count?: number;
        /**
         * Filter by a metacritic rating, for example: `80,100`.
         */
        metacritic?: string;
        /**
         * Exclude games from a particular collection, for example: `123`.
         */
        exclude_collection?: number;
        /**
         * Exclude additions.
         */
        exclude_additions?: boolean;
        /**
         * Exclude games which have additions.
         */
        exclude_parents?: boolean;
        /**
         * Exclude games which included in a game series.
         */
        exclude_game_series?: boolean;
        /**
         * Exclude stores, for example: `5,6`.
         */
        exclude_stores?: string;
        /**
         * Available fields: `name`, `released`, `added`, `created`, `updated`, `rating`, `metacritic`. You can reverse the sort order adding a hyphen, for example: `-released`.
         */
        ordering?: string;
    };
    url: '/games';
};

export type GamesListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<GameReadable>;
    };
};

export type GamesListResponse = GamesListResponses[keyof GamesListResponses];

export type GamesAdditionsListData = {
    body?: never;
    path: {
        game_pk: string;
    };
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/games/{game_pk}/additions';
};

export type GamesAdditionsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<GameReadable>;
    };
};

export type GamesAdditionsListResponse = GamesAdditionsListResponses[keyof GamesAdditionsListResponses];

export type GamesDevelopmentTeamListData = {
    body?: never;
    path: {
        game_pk: string;
    };
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/games/{game_pk}/development-team';
};

export type GamesDevelopmentTeamListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<GamePersonListReadable>;
    };
};

export type GamesDevelopmentTeamListResponse = GamesDevelopmentTeamListResponses[keyof GamesDevelopmentTeamListResponses];

export type GamesGameSeriesListData = {
    body?: never;
    path: {
        game_pk: string;
    };
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/games/{game_pk}/game-series';
};

export type GamesGameSeriesListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<GameReadable>;
    };
};

export type GamesGameSeriesListResponse = GamesGameSeriesListResponses[keyof GamesGameSeriesListResponses];

export type GamesParentGamesListData = {
    body?: never;
    path: {
        game_pk: string;
    };
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/games/{game_pk}/parent-games';
};

export type GamesParentGamesListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<GameReadable>;
    };
};

export type GamesParentGamesListResponse = GamesParentGamesListResponses[keyof GamesParentGamesListResponses];

export type GamesScreenshotsListData = {
    body?: never;
    path: {
        game_pk: string;
    };
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/games/{game_pk}/screenshots';
};

export type GamesScreenshotsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<ScreenShotReadable>;
    };
};

export type GamesScreenshotsListResponse = GamesScreenshotsListResponses[keyof GamesScreenshotsListResponses];

export type GamesStoresListData = {
    body?: never;
    path: {
        game_pk: string;
    };
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/games/{game_pk}/stores';
};

export type GamesStoresListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<GameStoreFullReadable>;
    };
};

export type GamesStoresListResponse = GamesStoresListResponses[keyof GamesStoresListResponses];

export type GamesReadData = {
    body?: never;
    path: {
        /**
         * An ID or a slug identifying this Game.
         */
        id: string;
    };
    query?: never;
    url: '/games/{id}';
};

export type GamesReadResponses = {
    200: GameSingleReadable;
};

export type GamesReadResponse = GamesReadResponses[keyof GamesReadResponses];

export type GamesAchievementsReadData = {
    body?: never;
    path: {
        /**
         * An ID or a slug identifying this Game.
         */
        id: string;
    };
    query?: never;
    url: '/games/{id}/achievements';
};

export type GamesAchievementsReadResponses = {
    200: ParentAchievement;
};

export type GamesAchievementsReadResponse = GamesAchievementsReadResponses[keyof GamesAchievementsReadResponses];

export type GamesMoviesReadData = {
    body?: never;
    path: {
        /**
         * An ID or a slug identifying this Game.
         */
        id: string;
    };
    query?: never;
    url: '/games/{id}/movies';
};

export type GamesMoviesReadResponses = {
    200: Movie;
};

export type GamesMoviesReadResponse = GamesMoviesReadResponses[keyof GamesMoviesReadResponses];

export type GamesRedditReadData = {
    body?: never;
    path: {
        /**
         * An ID or a slug identifying this Game.
         */
        id: string;
    };
    query?: never;
    url: '/games/{id}/reddit';
};

export type GamesRedditReadResponses = {
    200: Reddit;
};

export type GamesRedditReadResponse = GamesRedditReadResponses[keyof GamesRedditReadResponses];

export type GamesSuggestedReadData = {
    body?: never;
    path: {
        /**
         * An ID or a slug identifying this Game.
         */
        id: string;
    };
    query?: never;
    url: '/games/{id}/suggested';
};

export type GamesSuggestedReadResponses = {
    200: GameSingleReadable;
};

export type GamesSuggestedReadResponse = GamesSuggestedReadResponses[keyof GamesSuggestedReadResponses];

export type GamesTwitchReadData = {
    body?: never;
    path: {
        /**
         * An ID or a slug identifying this Game.
         */
        id: string;
    };
    query?: never;
    url: '/games/{id}/twitch';
};

export type GamesTwitchReadResponses = {
    200: Twitch;
};

export type GamesTwitchReadResponse = GamesTwitchReadResponses[keyof GamesTwitchReadResponses];

export type GamesYoutubeReadData = {
    body?: never;
    path: {
        /**
         * An ID or a slug identifying this Game.
         */
        id: string;
    };
    query?: never;
    url: '/games/{id}/youtube';
};

export type GamesYoutubeReadResponses = {
    200: Youtube;
};

export type GamesYoutubeReadResponse = GamesYoutubeReadResponses[keyof GamesYoutubeReadResponses];

export type GenresListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/genres';
};

export type GenresListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<GenreReadable>;
    };
};

export type GenresListResponse = GenresListResponses[keyof GenresListResponses];

export type GenresReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Genre.
         */
        id: number;
    };
    query?: never;
    url: '/genres/{id}';
};

export type GenresReadResponses = {
    200: GenreSingleReadable;
};

export type GenresReadResponse = GenresReadResponses[keyof GenresReadResponses];

export type PlatformsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/platforms';
};

export type PlatformsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<PlatformReadable>;
    };
};

export type PlatformsListResponse = PlatformsListResponses[keyof PlatformsListResponses];

export type PlatformsListsParentsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/platforms/lists/parents';
};

export type PlatformsListsParentsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<PlatformParentSingleReadable>;
    };
};

export type PlatformsListsParentsListResponse = PlatformsListsParentsListResponses[keyof PlatformsListsParentsListResponses];

export type PlatformsReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Platform.
         */
        id: number;
    };
    query?: never;
    url: '/platforms/{id}';
};

export type PlatformsReadResponses = {
    200: PlatformSingleReadable;
};

export type PlatformsReadResponse = PlatformsReadResponses[keyof PlatformsReadResponses];

export type PublishersListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/publishers';
};

export type PublishersListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<PublisherReadable>;
    };
};

export type PublishersListResponse = PublishersListResponses[keyof PublishersListResponses];

export type PublishersReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Publisher.
         */
        id: number;
    };
    query?: never;
    url: '/publishers/{id}';
};

export type PublishersReadResponses = {
    200: PublisherSingleReadable;
};

export type PublishersReadResponse = PublishersReadResponses[keyof PublishersReadResponses];

export type StoresListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/stores';
};

export type StoresListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<StoreReadable>;
    };
};

export type StoresListResponse = StoresListResponses[keyof StoresListResponses];

export type StoresReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Store.
         */
        id: number;
    };
    query?: never;
    url: '/stores/{id}';
};

export type StoresReadResponses = {
    200: StoreSingleReadable;
};

export type StoresReadResponse = StoresReadResponses[keyof StoresReadResponses];

export type TagsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/tags';
};

export type TagsListResponses = {
    200: {
        count: number;
        next?: string | null;
        previous?: string | null;
        results: Array<TagReadable>;
    };
};

export type TagsListResponse = TagsListResponses[keyof TagsListResponses];

export type TagsReadData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Tag.
         */
        id: number;
    };
    query?: never;
    url: '/tags/{id}';
};

export type TagsReadResponses = {
    200: TagSingleReadable;
};

export type TagsReadResponse = TagsReadResponses[keyof TagsReadResponses];

export type ClientOptions = {
    baseUrl: 'https://api.rawg.io/api' | (string & {});
};
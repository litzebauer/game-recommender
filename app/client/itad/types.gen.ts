// This file is auto-generated by @hey-api/openapi-ts

export type RespLookupGidByTitle = {
    [key: string]: null | string;
};

export type RespLookupGidByShopid = {
    [key: string]: null | string;
};

export type RespLookupShopidByGid = {
    [key: string]: unknown;
};

export type ObjGameType = 'game' | 'dlc' | 'package' | null;

export type ObjAssetMap = {
    banner145?: string;
    banner300?: string;
    banner400?: string;
    banner600?: string;
    boxart?: string;
};

export type ObjGame = {
    id: string;
    slug: string;
    title: string;
    type: ObjGameType;
    mature: boolean;
    assets: ObjAssetMap;
};

export type RespGamesSearch = Array<ObjGame>;

export type RespGamesLookup = {
    found: boolean;
    game?: ObjGame;
};

export type ObjCompany = {
    id: number;
    name: string;
};

export type ObjReviews = {
    score: number | null;
    source: string;
    count: number | null;
    url: string;
};

export type RespGamesInfo = {
    id: string;
    slug: string;
    title: string;
    type: ObjGameType;
    mature: boolean;
    assets: ObjAssetMap;
    earlyAccess: boolean;
    achievements: boolean;
    tradingCards: boolean;
    appid: number | null;
    tags: Array<string>;
    releaseDate: string | null;
    developers: Array<ObjCompany>;
    publishers: Array<ObjCompany>;
    reviews: Array<ObjReviews>;
    stats: {
        rank?: number;
        waitlisted?: number;
        collected?: number;
    };
    players: {
        recent: number;
        day: number;
        week: number;
        peak: number;
    } | null;
    urls: {
        game: string;
    };
};

export type ObjPrice = {
    amount: number;
    amountInt: number;
    currency: string;
};

export type ObjShop = {
    id: number;
    name: string;
};

export type ObjDealFlag = 'H' | 'N' | 'S' | null;

export type ObjDrm = {
    id: number;
    name: string;
};

export type ObjDrmList = Array<ObjDrm>;

export type ObjPlatform = {
    id: number;
    name: string;
};

export type ObjPlatformList = Array<ObjPlatform>;

export type ObjDeal2 = {
    shop: ObjShop;
    price: ObjPrice;
    regular: ObjPrice;
    cut: number;
    voucher: string | null;
    storeLow: null | ObjPrice;
    flag: ObjDealFlag;
    drm: ObjDrmList;
    platforms: ObjPlatformList;
    timestamp: string;
    expiry: string | null;
    url: string;
};

export type RespGamesPrices = Array<{
    /**
     * Game ID
     */
    id: string;
    historyLow: {
        all: null | ObjPrice;
        y1: null | ObjPrice;
        m3: null | ObjPrice;
    };
    deals: Array<ObjDeal2>;
}>;

export type ObjBundle = {
    id: number;
    title: string;
    page: {
        id: number;
        name: string;
        shopId?: number | null;
    };
    url: string;
    details?: string;
    isMature: boolean;
    publish: string;
    expiry: string | null;
    counts: {
        games: number;
        media: number;
    };
    tiers: Array<{
        price: ObjPrice | null;
        games: Array<ObjGame>;
    }>;
};

export type RespGamesBundles = Array<ObjBundle>;

/**
 * This object is basically the same as regular Deal, difference being storeLow and historyLow properties are not included
 */
export type ObjDealOverview = {
    shop: ObjShop;
    price: ObjPrice;
    regular: ObjPrice;
    cut: number;
    voucher: string | null;
    flag: ObjDealFlag;
    drm: ObjDrmList;
    platforms: ObjPlatformList;
    timestamp: string;
    expiry: string | null;
    url: string;
};

export type ObjHistorylow = {
    shop: ObjShop;
    price: ObjPrice;
    regular: ObjPrice;
    cut: number;
    timestamp: string;
};

export type RespGamesOverview = {
    prices: Array<{
        id: string;
        current: ObjDealOverview | null;
        lowest: ObjHistorylow | null;
        bundled: number;
        urls: {
            game: string;
        };
    }>;
    bundles: Array<ObjBundle>;
};

export type RespGamesHistorylow = Array<{
    id: string;
    low: ObjHistorylow;
}>;

export type RespGamesStorelow = Array<{
    id: string;
    lows: Array<{
        shop: ObjShop;
        price: ObjPrice;
        regular: ObjPrice;
        cut: number;
        timestamp: string;
    }>;
}>;

export type RespGamesHistory = Array<{
    timestamp: string;
    shop: ObjShop;
    deal: {
        price: ObjPrice;
        regular: ObjPrice;
        cut: number;
    } | null;
}>;

export type ObjGameSubscription = {
    id: number;
    name: string;
    leaving: string | null;
};

export type RespGamesSubscriptions = Array<{
    id: string;
    subs: Array<ObjGameSubscription>;
}>;

export type ObjDeal = {
    shop: ObjShop;
    price: ObjPrice;
    regular: ObjPrice;
    cut: number;
    voucher: string | null;
    storeLow: null | ObjPrice;
    historyLow: null | ObjPrice;
    historyLow_1y: null | ObjPrice;
    historyLow_3m: null | ObjPrice;
    flag: ObjDealFlag;
    drm: ObjDrmList;
    platforms: ObjPlatformList;
    timestamp: string;
    expiry: string | null;
    url: string;
};

export type RespDeals = {
    nextOffset: number;
    hasMore: boolean;
    list: Array<{
        id: string;
        slug: string;
        title: string;
        type: ObjGameType;
        mature?: boolean;
        assets?: ObjAssetMap;
        deal: ObjDeal;
    }>;
};

export type ObjWaitlistGame = {
    id: string;
    slug: string;
    title: string;
    type: ObjGameType;
    assets: ObjAssetMap;
    mature: boolean;
    added: string | null;
};

export type RespWaitlistGames = Array<ObjWaitlistGame>;

export type ObjCollectionGame = {
    id: string;
    slug: string;
    title: string;
    type: ObjGameType;
    assets: ObjAssetMap;
    mature: boolean;
    group: number;
    added: string | null;
};

export type ObjUserTag = {
    id: number;
    tag: string;
};

export type ObjCollectionCopy = {
    id: number;
    game: {
        id: string;
    };
    shop: ObjShop | null;
    redeemed: boolean;
    price: ObjPrice | null;
    note: string | null;
    tags: Array<ObjUserTag>;
    added: string;
};

export type ObjCollectionCopyNew = {
    gameId: string;
    redeemed: boolean;
    shop?: number | null;
    price?: {
        amount: number;
        currency: string;
    } | null;
    note?: string | null;
    tags?: Array<string> | null;
};

export type ObjCollectionCopyPatch = {
    id: number;
    redeemed?: boolean;
    shop?: number | null;
    price?: {
        amount: number;
        currency: string;
    } | null;
    note?: string | null;
    tags?: Array<string> | null;
};

export type ObjCollectionGroup = {
    id: number;
    title: string;
    public: boolean;
};

export type ObjCollectionGroupNew = {
    title: string;
    public: boolean;
};

export type ObjCollectionGroupPatch = {
    id: number;
    title?: string | null;
    public?: boolean | null;
    position?: number | null;
};

export type Bucket = {
    bucket: number;
    count: number;
    percentile: number;
};

export type RespStatsWaitlist = {
    count: number;
    price: {
        /**
         * Currency in which the prices are listed
         */
        currency: string;
        /**
         * How many users did not set price limit
         */
        any: number;
        average: number;
        buckets: Array<Bucket>;
    };
    cut: {
        average: number;
        buckets: Array<Bucket>;
    };
};

export type ObjGameRanked = {
    position: number;
    id: string;
    slug: string;
    title: string;
    type: ObjGameType;
    mature: boolean;
    count: number;
};

export type RespStatsRankedGames = Array<ObjGameRanked>;

export type RespUserInfo = {
    username: string | null;
};

export type ObjNote = {
    /**
     * Game ID
     */
    gid: string;
    /**
     * Non-empty string
     */
    note: string;
};

export type RespNotesGet = Array<ObjNote>;

/**
 * Description of the account
 */
export type ObjProfile = {
    /**
     * Per-app unique ID. This can be any string, but it needs to uniquely identify the account within your app.
     */
    accountId: string;
    /**
     * Name of the account. Does not need to be unique, it's meant to be a human-friendly name.
     */
    accountName: string;
};

export type RespLinkPut = {
    token: string;
};

export type ObjWaitlistEntry = {
    /**
     * Shop ID
     */
    shop: number;
    /**
     * ID can be any string that will identify the game. It should be stable and not change in the future.
     *
     * ID can also used to identify the game, if you use same IDs that we use for tracking shops. If a game is not identified
     * with shop and id, we will use title.
     *
     * For Steam we use full ids, i.e. app/{id}, sub/{id} or bundle/{id}.
     *
     */
    id: string;
    /**
     * Title of the game.
     *
     */
    title: string;
};

export type RespSyncWaitlist = {
    /**
     * Number of games that were successfully parsed
     */
    total: number;
    /**
     * Number of games that were added to Waitlist
     */
    added: number;
    /**
     * Number of games that were removed from Waitlist
     */
    removed: number;
};

export type ObjCollectionEntry = {
    /**
     * Shop ID
     */
    shop: number;
    /**
     * ID can be any string that will identify the game. It should be stable and not change in the future.
     *
     * ID can also used to identify the game, if you use same IDs that we use for tracking shops. If a game is not identified
     * with shop and id, we will use title.
     *
     * For Steam we use full ids, i.e. app/{id}, sub/{id} or bundle/{id}.
     *
     */
    id: string;
    /**
     * Title of the game.
     *
     */
    title: string;
    /**
     * Play time in minutes
     */
    playtime?: number | null;
    lastPlayed?: string | null;
};

export type RespSyncCollection = {
    /**
     * Number of copies that were successfully parsed
     */
    total: number;
    /**
     * Number of copies that were added to Collection
     */
    added: number;
    /**
     * Number of copies that were removed from Collection
     */
    removed: number;
};

export type ObjNotification = {
    id: string;
    type: 'waitlist';
    title: string;
    timestamp: string;
    read: string | null;
};

export type ObjPriceNullable = ObjPrice | null;

export type ObjNotificationDeal = {
    shop: ObjShop;
    price: ObjPrice;
    regular: ObjPrice;
    cut: number;
    voucher: string | null;
    storeLow: ObjPriceNullable;
    flag: ObjDealFlag;
    drm: ObjDrmList;
    platforms: ObjPlatformList;
    timestamp: string;
    expiry: string | null;
    url: string;
};

export type ObjNotificationGame = {
    id: string;
    slug: string;
    title: string;
    type: ObjGameType;
    mature: boolean;
    historyLow: ObjPriceNullable;
    lastPrice: ObjPriceNullable;
    deals: Array<ObjNotificationDeal>;
};

export type ObjNotificationWaitlist = {
    id: string;
    timestamp: string;
    read: string | null;
    games: Array<ObjNotificationGame>;
};

export type RespServiceShops = Array<{
    id: number;
    title: string;
    deals: number;
    games: number;
    update: string | null;
}>;

export type RespInternalPlayers = {
    current: number;
    day: number;
    peak: number;
};

export type RespInternalHltb = {
    id: number;
    main: null | number;
    extra: null | number;
    complete: null | number;
};

export type RespInternalReviews = {
    metauser: {
        score?: number | null;
        verdict?: string | null;
        url?: string;
    } | null;
    opencritic: {
        score?: number | null;
        verdict?: string | null;
        url?: string;
    } | null;
};

export type RespInternalRates = Array<{
    from: string;
    to: string;
    rate: number;
}>;

export type RespInternalExfgls = {
    [key: string]: boolean;
};

export type RespInternalTwitchstream = {
    user_name: string;
    title: string;
    thumbnail_url: string;
    viewer_count: number;
    game: string;
} | null;

/**
 * Two letter country code (ISO 3166-1 alpha-2)
 */
export type Country = string;

/**
 * Game ID
 */
export type Gid = string;

/**
 * List of shop IDs
 */
export type Shops = Array<number>;

export type HeadersUserAgent = 'ITAD-Webhooks/1.0 (+https://isthereanydeal.com)';

export type HeadersContentType = 'application/json';

/**
 * ID of the Webhook
 */
export type HeadersHookId = string;

/**
 * Event that generated the request
 */
export type HeadersEvent = string;

/**
 * List of Game IDs
 */
export type Gids = Array<string>;

/**
 * List of Game IDs
 */
export type Gids200 = Array<string>;

export type LookupGidTitleV1Data = {
    /**
     * List of titles
     */
    body?: Array<string>;
    path?: never;
    query?: never;
    url: '/lookup/id/title/v1';
};

export type LookupGidTitleV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type LookupGidTitleV1Error = LookupGidTitleV1Errors[keyof LookupGidTitleV1Errors];

export type LookupGidTitleV1Responses = {
    /**
     * Success response
     */
    200: RespLookupGidByTitle;
};

export type LookupGidTitleV1Response = LookupGidTitleV1Responses[keyof LookupGidTitleV1Responses];

export type LookupGidShopidV1Data = {
    /**
     * List of shop's game IDs
     */
    body?: Array<string>;
    path: {
        shopId: number;
    };
    query?: never;
    url: '/lookup/id/shop/{shopId}/v1';
};

export type LookupGidShopidV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type LookupGidShopidV1Error = LookupGidShopidV1Errors[keyof LookupGidShopidV1Errors];

export type LookupGidShopidV1Responses = {
    /**
     * Success response
     */
    200: RespLookupGidByShopid;
};

export type LookupGidShopidV1Response = LookupGidShopidV1Responses[keyof LookupGidShopidV1Responses];

export type LookupShopidGidV1Data = {
    /**
     * List of game IDs
     */
    body?: Array<string>;
    path: {
        shopId: number;
    };
    query?: never;
    url: '/lookup/shop/{shopId}/id/v1';
};

export type LookupShopidGidV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type LookupShopidGidV1Error = LookupShopidGidV1Errors[keyof LookupShopidGidV1Errors];

export type LookupShopidGidV1Responses = {
    /**
     * Success response
     */
    200: RespLookupShopidByGid;
};

export type LookupShopidGidV1Response = LookupShopidGidV1Responses[keyof LookupShopidGidV1Responses];

export type GamesSearchV1Data = {
    body?: never;
    path?: never;
    query: {
        /**
         * Find games by name
         */
        title: string;
        /**
         * Maximum number of results to return
         */
        results?: number;
    };
    url: '/games/search/v1';
};

export type GamesSearchV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesSearchV1Error = GamesSearchV1Errors[keyof GamesSearchV1Errors];

export type GamesSearchV1Responses = {
    /**
     * Search response
     */
    200: RespGamesSearch;
};

export type GamesSearchV1Response = GamesSearchV1Responses[keyof GamesSearchV1Responses];

export type GamesLookupV1Data = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Find game by it's name
         */
        title?: string;
        /**
         * Find game by Steam appid
         */
        appid?: number;
    };
    url: '/games/lookup/v1';
};

export type GamesLookupV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesLookupV1Error = GamesLookupV1Errors[keyof GamesLookupV1Errors];

export type GamesLookupV1Responses = {
    /**
     * Lookup response with found game
     */
    200: RespGamesLookup;
};

export type GamesLookupV1Response = GamesLookupV1Responses[keyof GamesLookupV1Responses];

export type GamesInfoV2Data = {
    body?: never;
    path?: never;
    query: {
        /**
         * Game ID
         */
        id: string;
    };
    url: '/games/info/v2';
};

export type GamesInfoV2Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    404: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesInfoV2Error = GamesInfoV2Errors[keyof GamesInfoV2Errors];

export type GamesInfoV2Responses = {
    /**
     * Info response
     */
    200: RespGamesInfo;
};

export type GamesInfoV2Response = GamesInfoV2Responses[keyof GamesInfoV2Responses];

export type GamesPricesV3Data = {
    /**
     * List of Game IDs for which to load prices
     */
    body?: Gids200;
    path?: never;
    query?: {
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
        /**
         * Only load deals, omit prices that have no price cut
         */
        deals?: boolean;
        /**
         * Allow vouchers in prices
         */
        vouchers?: boolean;
        /**
         * How many prices to load per each game, 0 or omit for no limit
         */
        capacity?: number;
        /**
         * List of shop IDs
         */
        shops?: Array<number>;
    };
    url: '/games/prices/v3';
};

export type GamesPricesV3Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesPricesV3Error = GamesPricesV3Errors[keyof GamesPricesV3Errors];

export type GamesPricesV3Responses = {
    /**
     * Info response
     */
    200: RespGamesPrices;
};

export type GamesPricesV3Response = GamesPricesV3Responses[keyof GamesPricesV3Responses];

export type GamesBundlesV2Data = {
    body?: never;
    path?: never;
    query: {
        /**
         * Game ID
         */
        id: string;
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
        /**
         * Include expired bundles
         */
        expired?: boolean;
    };
    url: '/games/bundles/v2';
};

export type GamesBundlesV2Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesBundlesV2Error = GamesBundlesV2Errors[keyof GamesBundlesV2Errors];

export type GamesBundlesV2Responses = {
    /**
     * Success response
     */
    200: RespGamesBundles;
};

export type GamesBundlesV2Response = GamesBundlesV2Responses[keyof GamesBundlesV2Responses];

export type GamesOverviewV2Data = {
    /**
     * List of Game IDs
     */
    body?: Gids200;
    path?: never;
    query?: {
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
        /**
         * List of shop IDs
         */
        shops?: Array<number>;
        /**
         * Allow vouchers in prices
         */
        vouchers?: boolean;
    };
    url: '/games/overview/v2';
};

export type GamesOverviewV2Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesOverviewV2Error = GamesOverviewV2Errors[keyof GamesOverviewV2Errors];

export type GamesOverviewV2Responses = {
    /**
     * Success response
     */
    200: RespGamesOverview;
};

export type GamesOverviewV2Response = GamesOverviewV2Responses[keyof GamesOverviewV2Responses];

export type GamesHistorylowV1Data = {
    /**
     * List of Game IDs for which to load historical lows
     */
    body?: Gids200;
    path?: never;
    query?: {
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
    };
    url: '/games/historylow/v1';
};

export type GamesHistorylowV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesHistorylowV1Error = GamesHistorylowV1Errors[keyof GamesHistorylowV1Errors];

export type GamesHistorylowV1Responses = {
    /**
     * Success response
     */
    200: RespGamesHistorylow;
};

export type GamesHistorylowV1Response = GamesHistorylowV1Responses[keyof GamesHistorylowV1Responses];

export type GamesStorelowV2Data = {
    /**
     * List of Game IDs for which to load store lows
     */
    body?: Gids200;
    path?: never;
    query?: {
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
        /**
         * List of shop IDs
         */
        shops?: Array<number>;
    };
    url: '/games/storelow/v2';
};

export type GamesStorelowV2Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesStorelowV2Error = GamesStorelowV2Errors[keyof GamesStorelowV2Errors];

export type GamesStorelowV2Responses = {
    /**
     * Success response
     */
    200: RespGamesStorelow;
};

export type GamesStorelowV2Response = GamesStorelowV2Responses[keyof GamesStorelowV2Responses];

export type GamesHistoryV2Data = {
    body?: never;
    path?: never;
    query: {
        /**
         * Game ID
         */
        id: string;
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
        /**
         * List of shop IDs
         */
        shops?: Array<number>;
        /**
         * Load only price changes after this date.
         * By default, only last 3 months are loaded
         *
         */
        since?: string;
    };
    url: '/games/history/v2';
};

export type GamesHistoryV2Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesHistoryV2Error = GamesHistoryV2Errors[keyof GamesHistoryV2Errors];

export type GamesHistoryV2Responses = {
    /**
     * Success response
     */
    200: RespGamesHistory;
};

export type GamesHistoryV2Response = GamesHistoryV2Responses[keyof GamesHistoryV2Responses];

export type GamesSubscriptionsV1Data = {
    /**
     * List of Game IDs
     */
    body?: Gids200;
    path?: never;
    query?: {
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
    };
    url: '/games/subs/v1';
};

export type GamesSubscriptionsV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type GamesSubscriptionsV1Error = GamesSubscriptionsV1Errors[keyof GamesSubscriptionsV1Errors];

export type GamesSubscriptionsV1Responses = {
    /**
     * Success response
     */
    200: RespGamesSubscriptions;
};

export type GamesSubscriptionsV1Response = GamesSubscriptionsV1Responses[keyof GamesSubscriptionsV1Responses];

export type DealsV2Data = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
        /**
         * Deals list offset
         */
        offset?: number;
        /**
         * How many deals to return
         */
        limit?: number;
        /**
         * Sorting values, same as in deals list on the website
         */
        sort?: string;
        /**
         * Load non-sale prices
         */
        nondeals?: boolean;
        /**
         * Load deals for mature prices
         */
        mature?: boolean;
        /**
         * List of shop IDs separated by comma
         */
        shops?: Array<number>;
        /**
         * Filter string
         */
        filter?: string;
    };
    url: '/deals/v2';
};

export type DealsV2Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type DealsV2Error = DealsV2Errors[keyof DealsV2Errors];

export type DealsV2Responses = {
    /**
     * Deals list
     */
    200: RespDeals;
};

export type DealsV2Response = DealsV2Responses[keyof DealsV2Responses];

export type WaitlistGamesV1DeleteData = {
    /**
     * List of Game IDs
     */
    body?: Gids;
    path?: never;
    query?: never;
    url: '/waitlist/games/v1';
};

export type WaitlistGamesV1DeleteErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type WaitlistGamesV1DeleteError = WaitlistGamesV1DeleteErrors[keyof WaitlistGamesV1DeleteErrors];

export type WaitlistGamesV1DeleteResponses = {
    /**
     * Successful response
     */
    204: void;
};

export type WaitlistGamesV1DeleteResponse = WaitlistGamesV1DeleteResponses[keyof WaitlistGamesV1DeleteResponses];

export type WaitlistGamesV1GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/waitlist/games/v1';
};

export type WaitlistGamesV1GetErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type WaitlistGamesV1GetError = WaitlistGamesV1GetErrors[keyof WaitlistGamesV1GetErrors];

export type WaitlistGamesV1GetResponses = {
    /**
     * Success response
     */
    200: RespWaitlistGames;
};

export type WaitlistGamesV1GetResponse = WaitlistGamesV1GetResponses[keyof WaitlistGamesV1GetResponses];

export type WaitlistGamesV1PutData = {
    /**
     * List of Game IDs
     */
    body?: Gids;
    path?: never;
    query?: never;
    url: '/waitlist/games/v1';
};

export type WaitlistGamesV1PutErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type WaitlistGamesV1PutError = WaitlistGamesV1PutErrors[keyof WaitlistGamesV1PutErrors];

export type WaitlistGamesV1PutResponses = {
    /**
     * Successful response
     */
    204: void;
};

export type WaitlistGamesV1PutResponse = WaitlistGamesV1PutResponses[keyof WaitlistGamesV1PutResponses];

export type CollectionGamesV1DeleteData = {
    /**
     * List of Game IDs
     */
    body?: Gids;
    path?: never;
    query?: never;
    url: '/collection/games/v1';
};

export type CollectionGamesV1DeleteErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type CollectionGamesV1DeleteError = CollectionGamesV1DeleteErrors[keyof CollectionGamesV1DeleteErrors];

export type CollectionGamesV1DeleteResponses = {
    /**
     * Successful response
     */
    204: void;
};

export type CollectionGamesV1DeleteResponse = CollectionGamesV1DeleteResponses[keyof CollectionGamesV1DeleteResponses];

export type CollectionGamesV1GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/collection/games/v1';
};

export type CollectionGamesV1GetErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type CollectionGamesV1GetError = CollectionGamesV1GetErrors[keyof CollectionGamesV1GetErrors];

export type CollectionGamesV1GetResponses = {
    /**
     * Success response
     */
    200: Array<ObjCollectionGame>;
};

export type CollectionGamesV1GetResponse = CollectionGamesV1GetResponses[keyof CollectionGamesV1GetResponses];

export type CollectionGamesV1PutData = {
    /**
     * List of Game IDs
     */
    body?: Gids;
    path?: never;
    query?: never;
    url: '/collection/games/v1';
};

export type CollectionGamesV1PutErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type CollectionGamesV1PutError = CollectionGamesV1PutErrors[keyof CollectionGamesV1PutErrors];

export type CollectionGamesV1PutResponses = {
    /**
     * Successful response
     */
    204: void;
};

export type CollectionGamesV1PutResponse = CollectionGamesV1PutResponses[keyof CollectionGamesV1PutResponses];

export type CollectionCopiesV1DeleteData = {
    /**
     * List of copy IDs
     */
    body?: Array<number>;
    path?: never;
    query?: never;
    url: '/collection/copies/v1';
};

export type CollectionCopiesV1DeleteErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type CollectionCopiesV1DeleteError = CollectionCopiesV1DeleteErrors[keyof CollectionCopiesV1DeleteErrors];

export type CollectionCopiesV1DeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CollectionCopiesV1GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/collection/copies/v1';
};

export type CollectionCopiesV1GetErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type CollectionCopiesV1GetError = CollectionCopiesV1GetErrors[keyof CollectionCopiesV1GetErrors];

export type CollectionCopiesV1GetResponses = {
    /**
     * Success response
     */
    200: Array<ObjCollectionCopy>;
};

export type CollectionCopiesV1GetResponse = CollectionCopiesV1GetResponses[keyof CollectionCopiesV1GetResponses];

export type CollectionCopiesV1PatchData = {
    body?: Array<ObjCollectionCopyPatch>;
    path?: never;
    query?: never;
    url: '/collection/copies/v1';
};

export type CollectionCopiesV1PatchErrors = {
    /**
     * Array Validation Error Response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
    /**
     * Array Validation Error Response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
};

export type CollectionCopiesV1PatchError = CollectionCopiesV1PatchErrors[keyof CollectionCopiesV1PatchErrors];

export type CollectionCopiesV1PatchResponses = {
    /**
     * Success response
     */
    200: unknown;
};

export type CollectionCopiesV1PostData = {
    /**
     * Copies to add
     */
    body?: Array<ObjCollectionCopyNew>;
    path?: never;
    query?: never;
    url: '/collection/copies/v1';
};

export type CollectionCopiesV1PostErrors = {
    /**
     * Array Validation Error Response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
    /**
     * Array Validation Error Response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
};

export type CollectionCopiesV1PostError = CollectionCopiesV1PostErrors[keyof CollectionCopiesV1PostErrors];

export type CollectionCopiesV1PostResponses = {
    /**
     * Successful response
     */
    201: unknown;
};

export type CollectionGroupsV1DeleteData = {
    /**
     * List of category IDs
     */
    body?: Array<number>;
    path?: never;
    query?: never;
    url: '/collection/groups/v1';
};

export type CollectionGroupsV1DeleteErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type CollectionGroupsV1DeleteError = CollectionGroupsV1DeleteErrors[keyof CollectionGroupsV1DeleteErrors];

export type CollectionGroupsV1DeleteResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type CollectionGroupsV1GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/collection/groups/v1';
};

export type CollectionGroupsV1GetErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type CollectionGroupsV1GetError = CollectionGroupsV1GetErrors[keyof CollectionGroupsV1GetErrors];

export type CollectionGroupsV1GetResponses = {
    /**
     * Success response
     */
    200: Array<ObjCollectionGroup>;
};

export type CollectionGroupsV1GetResponse = CollectionGroupsV1GetResponses[keyof CollectionGroupsV1GetResponses];

export type CollectionGroupsV1PatchData = {
    body?: Array<ObjCollectionGroupPatch>;
    path?: never;
    query?: never;
    url: '/collection/groups/v1';
};

export type CollectionGroupsV1PatchErrors = {
    /**
     * Array Validation Error Response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
    /**
     * Array Validation Error Response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
};

export type CollectionGroupsV1PatchError = CollectionGroupsV1PatchErrors[keyof CollectionGroupsV1PatchErrors];

export type CollectionGroupsV1PatchResponses = {
    /**
     * Success response
     */
    200: Array<ObjCollectionGroup>;
};

export type CollectionGroupsV1PatchResponse = CollectionGroupsV1PatchResponses[keyof CollectionGroupsV1PatchResponses];

export type CollectionGroupsV1PostData = {
    /**
     * Category to create
     */
    body?: ObjCollectionGroupNew;
    path?: never;
    query?: never;
    url: '/collection/groups/v1';
};

export type CollectionGroupsV1PostErrors = {
    /**
     * Data Validation Error Response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be provided as a map,
         * where key is the property that failed to validate and value is the error itself.
         *
         */
        details?: {
            [key: string]: string;
        };
    };
    /**
     * Data Validation Error Response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be provided as a map,
         * where key is the property that failed to validate and value is the error itself.
         *
         */
        details?: {
            [key: string]: string;
        };
    };
};

export type CollectionGroupsV1PostError = CollectionGroupsV1PostErrors[keyof CollectionGroupsV1PostErrors];

export type CollectionGroupsV1PostResponses = {
    /**
     * Created category
     */
    200: ObjCollectionGroup;
};

export type CollectionGroupsV1PostResponse = CollectionGroupsV1PostResponses[keyof CollectionGroupsV1PostResponses];

export type StatsWaitlistV1Data = {
    body?: never;
    path?: never;
    query: {
        /**
         * Game ID
         */
        id: string;
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
        /**
         * Price bucket size
         */
        bucket_price?: number;
        /**
         * Cut bucket size
         */
        bucket_cut?: number;
    };
    url: '/stats/waitlist/v1';
};

export type StatsWaitlistV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type StatsWaitlistV1Error = StatsWaitlistV1Errors[keyof StatsWaitlistV1Errors];

export type StatsWaitlistV1Responses = {
    /**
     * Success response
     */
    200: RespStatsWaitlist;
};

export type StatsWaitlistV1Response = StatsWaitlistV1Responses[keyof StatsWaitlistV1Responses];

export type StatsMostWaitlistedV1Data = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/stats/most-waitlisted/v1';
};

export type StatsMostWaitlistedV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type StatsMostWaitlistedV1Error = StatsMostWaitlistedV1Errors[keyof StatsMostWaitlistedV1Errors];

export type StatsMostWaitlistedV1Responses = {
    /**
     * Success response
     */
    200: RespStatsRankedGames;
};

export type StatsMostWaitlistedV1Response = StatsMostWaitlistedV1Responses[keyof StatsMostWaitlistedV1Responses];

export type StatsMostCollectedV1Data = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/stats/most-collected/v1';
};

export type StatsMostCollectedV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type StatsMostCollectedV1Error = StatsMostCollectedV1Errors[keyof StatsMostCollectedV1Errors];

export type StatsMostCollectedV1Responses = {
    /**
     * Success response
     */
    200: RespStatsRankedGames;
};

export type StatsMostCollectedV1Response = StatsMostCollectedV1Responses[keyof StatsMostCollectedV1Responses];

export type StatsMostPopularV1Data = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/stats/most-popular/v1';
};

export type StatsMostPopularV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type StatsMostPopularV1Error = StatsMostPopularV1Errors[keyof StatsMostPopularV1Errors];

export type StatsMostPopularV1Responses = {
    /**
     * Success response
     */
    200: RespStatsRankedGames;
};

export type StatsMostPopularV1Response = StatsMostPopularV1Responses[keyof StatsMostPopularV1Responses];

export type UserInfoV2Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/info/v2';
};

export type UserInfoV2Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type UserInfoV2Error = UserInfoV2Errors[keyof UserInfoV2Errors];

export type UserInfoV2Responses = {
    /**
     * Success response
     */
    200: RespUserInfo;
};

export type UserInfoV2Response = UserInfoV2Responses[keyof UserInfoV2Responses];

export type UserNotesV1DeleteData = {
    /**
     * List of game IDs
     */
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/user/notes/v1';
};

export type UserNotesV1DeleteErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type UserNotesV1DeleteError = UserNotesV1DeleteErrors[keyof UserNotesV1DeleteErrors];

export type UserNotesV1DeleteResponses = {
    /**
     * Success response
     */
    200: unknown;
};

export type UserNotesV1GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/notes/v1';
};

export type UserNotesV1GetErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type UserNotesV1GetError = UserNotesV1GetErrors[keyof UserNotesV1GetErrors];

export type UserNotesV1GetResponses = {
    /**
     * Success response
     */
    200: RespNotesGet;
};

export type UserNotesV1GetResponse = UserNotesV1GetResponses[keyof UserNotesV1GetResponses];

export type UserNotesV1PutData = {
    /**
     * List of notes
     */
    body: Array<ObjNote>;
    path?: never;
    query?: never;
    url: '/user/notes/v1';
};

export type UserNotesV1PutErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type UserNotesV1PutError = UserNotesV1PutErrors[keyof UserNotesV1PutErrors];

export type UserNotesV1PutResponses = {
    /**
     * Success response
     */
    200: unknown;
};

export type ProfilesLinkV1DeleteData = {
    body?: never;
    headers: {
        /**
         * Profile token
         */
        'ITAD-Profile': string;
    };
    path?: never;
    query?: never;
    url: '/profiles/link/v1';
};

export type ProfilesLinkV1DeleteErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type ProfilesLinkV1DeleteError = ProfilesLinkV1DeleteErrors[keyof ProfilesLinkV1DeleteErrors];

export type ProfilesLinkV1DeleteResponses = {
    /**
     * Success response
     */
    200: unknown;
};

export type ProfilesLinkV1PutData = {
    /**
     * Profile to link
     */
    body: ObjProfile;
    path?: never;
    query?: never;
    url: '/profiles/link/v1';
};

export type ProfilesLinkV1PutErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type ProfilesLinkV1PutError = ProfilesLinkV1PutErrors[keyof ProfilesLinkV1PutErrors];

export type ProfilesLinkV1PutResponses = {
    /**
     * Success response
     */
    200: RespLinkPut;
};

export type ProfilesLinkV1PutResponse = ProfilesLinkV1PutResponses[keyof ProfilesLinkV1PutResponses];

export type ProfilesSyncWaitlistV1PutData = {
    /**
     * Games to sync with IsThereAnyDeal
     */
    body: Array<ObjWaitlistEntry>;
    headers: {
        /**
         * Profile token
         */
        'ITAD-Profile': string;
    };
    path?: never;
    query?: never;
    url: '/profiles/sync/waitlist/v1';
};

export type ProfilesSyncWaitlistV1PutErrors = {
    /**
     * Array Validation Error Response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
    /**
     * Array Validation Error Response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
};

export type ProfilesSyncWaitlistV1PutError = ProfilesSyncWaitlistV1PutErrors[keyof ProfilesSyncWaitlistV1PutErrors];

export type ProfilesSyncWaitlistV1PutResponses = {
    /**
     * Success response
     */
    200: RespSyncWaitlist;
};

export type ProfilesSyncWaitlistV1PutResponse = ProfilesSyncWaitlistV1PutResponses[keyof ProfilesSyncWaitlistV1PutResponses];

export type ProfilesSyncCollectionV1PutData = {
    /**
     * Games to sync with IsThereAnyDeal
     */
    body: Array<ObjCollectionEntry>;
    headers: {
        /**
         * Profile token
         */
        'ITAD-Profile': string;
    };
    path?: never;
    query?: never;
    url: '/profiles/sync/collection/v1';
};

export type ProfilesSyncCollectionV1PutErrors = {
    /**
     * Array Validation Error Response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
    /**
     * Array Validation Error Response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
        /**
         * When this endpoint fails during data validation, validation errors will be listed
         * as array of two items.
         *
         * First item is the index of object in request data.
         *
         * Second item is map of errors, with key being the property that failed to validate and value is the error itself.
         *
         */
        details?: [
            number,
            {
                [key: string]: string;
            }
        ];
    };
};

export type ProfilesSyncCollectionV1PutError = ProfilesSyncCollectionV1PutErrors[keyof ProfilesSyncCollectionV1PutErrors];

export type ProfilesSyncCollectionV1PutResponses = {
    /**
     * Success response
     */
    200: RespSyncCollection;
};

export type ProfilesSyncCollectionV1PutResponse = ProfilesSyncCollectionV1PutResponses[keyof ProfilesSyncCollectionV1PutResponses];

export type NotificationsListV1GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/v1';
};

export type NotificationsListV1GetErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type NotificationsListV1GetError = NotificationsListV1GetErrors[keyof NotificationsListV1GetErrors];

export type NotificationsListV1GetResponses = {
    /**
     * Success response
     */
    200: Array<ObjNotification>;
};

export type NotificationsListV1GetResponse = NotificationsListV1GetResponses[keyof NotificationsListV1GetResponses];

export type NotificationsWaitlistV1GetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Notification ID
         */
        id: string;
    };
    url: '/notifications/waitlist/v1';
};

export type NotificationsWaitlistV1GetErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type NotificationsWaitlistV1GetError = NotificationsWaitlistV1GetErrors[keyof NotificationsWaitlistV1GetErrors];

export type NotificationsWaitlistV1GetResponses = {
    /**
     * Success response
     */
    200: ObjNotificationWaitlist;
};

export type NotificationsWaitlistV1GetResponse = NotificationsWaitlistV1GetResponses[keyof NotificationsWaitlistV1GetResponses];

export type NotificationsReadV1PutData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Notification ID
         */
        id: string;
    };
    url: '/notifications/read/v1';
};

export type NotificationsReadV1PutErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type NotificationsReadV1PutError = NotificationsReadV1PutErrors[keyof NotificationsReadV1PutErrors];

export type NotificationsReadV1PutResponses = {
    /**
     * Success response
     */
    204: void;
};

export type NotificationsReadV1PutResponse = NotificationsReadV1PutResponses[keyof NotificationsReadV1PutResponses];

export type NotificationsReadAllV1PutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/read/all/v1';
};

export type NotificationsReadAllV1PutErrors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type NotificationsReadAllV1PutError = NotificationsReadAllV1PutErrors[keyof NotificationsReadAllV1PutErrors];

export type NotificationsReadAllV1PutResponses = {
    /**
     * Success response
     */
    204: void;
};

export type NotificationsReadAllV1PutResponse = NotificationsReadAllV1PutResponses[keyof NotificationsReadAllV1PutResponses];

export type ServiceShopsV1Data = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Two letter country code (ISO 3166-1 alpha-2)
         */
        country?: string;
    };
    url: '/service/shops/v1';
};

export type ServiceShopsV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type ServiceShopsV1Error = ServiceShopsV1Errors[keyof ServiceShopsV1Errors];

export type ServiceShopsV1Responses = {
    /**
     * List of shops and their details
     */
    200: RespServiceShops;
};

export type ServiceShopsV1Response = ServiceShopsV1Responses[keyof ServiceShopsV1Responses];

export type InternalEarlyaccessV1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/internal/early-access/v1';
};

export type InternalEarlyaccessV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type InternalEarlyaccessV1Error = InternalEarlyaccessV1Errors[keyof InternalEarlyaccessV1Errors];

export type InternalEarlyaccessV1Responses = {
    /**
     * Success response
     */
    200: Array<number>;
};

export type InternalEarlyaccessV1Response = InternalEarlyaccessV1Responses[keyof InternalEarlyaccessV1Responses];

export type InternalPlayersV1Data = {
    body?: never;
    path?: never;
    query: {
        appid: number;
    };
    url: '/internal/players/v1';
};

export type InternalPlayersV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type InternalPlayersV1Error = InternalPlayersV1Errors[keyof InternalPlayersV1Errors];

export type InternalPlayersV1Responses = {
    /**
     * Success response
     */
    200: RespInternalPlayers;
};

export type InternalPlayersV1Response = InternalPlayersV1Responses[keyof InternalPlayersV1Responses];

export type InternalHltbV1Data = {
    body?: never;
    path?: never;
    query: {
        appid: number;
    };
    url: '/internal/hltb/v1';
};

export type InternalHltbV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type InternalHltbV1Error = InternalHltbV1Errors[keyof InternalHltbV1Errors];

export type InternalHltbV1Responses = {
    /**
     * Success response
     */
    200: RespInternalHltb;
};

export type InternalHltbV1Response = InternalHltbV1Responses[keyof InternalHltbV1Responses];

export type InternalReviewsV1Data = {
    body?: never;
    path?: never;
    query: {
        appid: number;
    };
    url: '/internal/reviews/v1';
};

export type InternalReviewsV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type InternalReviewsV1Error = InternalReviewsV1Errors[keyof InternalReviewsV1Errors];

export type InternalReviewsV1Responses = {
    /**
     * Success response
     */
    200: RespInternalReviews;
};

export type InternalReviewsV1Response = InternalReviewsV1Responses[keyof InternalReviewsV1Responses];

export type InternalRatesV1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/internal/rates/v1';
};

export type InternalRatesV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type InternalRatesV1Error = InternalRatesV1Errors[keyof InternalRatesV1Errors];

export type InternalRatesV1Responses = {
    /**
     * Success response
     */
    200: RespInternalRates;
};

export type InternalRatesV1Response = InternalRatesV1Responses[keyof InternalRatesV1Responses];

export type InternalExfglsV1Data = {
    /**
     * List of appids
     */
    body: Array<number>;
    path?: never;
    query?: never;
    url: '/internal/exfgls/v1';
};

export type InternalExfglsV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type InternalExfglsV1Error = InternalExfglsV1Errors[keyof InternalExfglsV1Errors];

export type InternalExfglsV1Responses = {
    /**
     * Success response
     */
    200: RespInternalExfgls;
};

export type InternalExfglsV1Response = InternalExfglsV1Responses[keyof InternalExfglsV1Responses];

export type InternalTwitchstreamV1Data = {
    body?: never;
    path?: never;
    query: {
        channel: string;
    };
    url: '/internal/twitch/stream/v1';
};

export type InternalTwitchstreamV1Errors = {
    /**
     * Error response
     */
    400: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
    /**
     * Error response
     */
    default: {
        /**
         * HTTP status code
         */
        status_code: number;
        /**
         * Error description
         */
        reason_phrase: string;
    };
};

export type InternalTwitchstreamV1Error = InternalTwitchstreamV1Errors[keyof InternalTwitchstreamV1Errors];

export type InternalTwitchstreamV1Responses = {
    /**
     * Success response
     */
    200: RespInternalTwitchstream;
};

export type InternalTwitchstreamV1Response = InternalTwitchstreamV1Responses[keyof InternalTwitchstreamV1Responses];

export type ClientOptions = {
    baseUrl: 'https://api.isthereanydeal.com' | (string & {});
};